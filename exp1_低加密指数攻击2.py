# 低加密指数攻击
# 在 RSA 中 e 也称为加密指数。由于 e 是可以随意选取的，选取小一点的 e 可以缩短加密时间（比如 3），但是选取不当的话，就会造成安全问题
# 如果明文的 3 次方比 n 大，但不足够大，那么设 k，有：𝑐=𝑚𝑒+𝑘𝑛 爆破 k，如果 c − kn 能开三次根式，那么可以直接得到明文
# 例题2：e = 3 且明文的三次方比 n 大，但是不是足够大
#       n= 114976915747243387792157708464120735018971336213935438953074748276198282761939060395482051056351068439137722626185590043024556656813730840050547350912425438364703854627760482842307943026011880815011654341047422453012558617703411700393668892701036222135444420377515575624398723436532681305293727164639582093389
#       c= 5828813410620741112500628876643872258919868379601617907887884191584237969605489971465692568848339200057188383649365078832766143513766368216471491824042974016773526107276856706832404477882581400769791378958901067683158857990261489285951805740071223765359992165262854641069674603160977034446644199945940251030
#       e = 3
#       还原 m
# -*- coding: cp936 -*-
import gmpy2
e = 3
# 读入 n, 密文
n= 22885480907469109159947272333565375109310485067211461543881386718201442106967914852474989176175269612229966461160065872310916096148216253429849921988412342732706875998100337754561586600637594798877898552625378551427864501926224989873772743227733285336042475675299391051376624685754547818835551263597996620383338263448888107691240136257201191331617560711786674975909597833383395574686942099700631002290836152972352041024137872983284691831292216787307841877839674258086005814225532597955826353796634417780156185485054141684249037538570742860026295194559710972266059844824388916869414355952432189722465103299013237588737
c= 15685364647213619014219110070569189770745535885901269792039052046431067708991036961644224230125219358149236447900927116989931929305133870392430610563331490276096858863490412102016758082433435355613099047001069687409209484751075897343335693872741
print('n=', n)
print('c=', c)
print('[+]Detecting m...')
result = gmpy2.iroot(c, 3)
print('  [-]The c has cubic root?', result[1])
if result[1]: print('  [-]The m is:', bytes.fromhex('{:x}'.format(result[0]))) #python3.5+
print('[!]All Done!')